/*

while (条件式) {
    条件を満たしている間、繰り返す処理
}

変数numに0~4までのランダムな整数を代入する
let num = Math.floor(Math.random() * 5);

変数numの値が0以外である間、変数numの値を出力し続ける
while (num !== 0) {
    num = Math.floor(Math.random() * 5);
    console.log(num);
}

変数numに０～４までのランダムな整数を代入する
let num = Math.floor(Math.random() * 5);

変数numの最初の値を出力する（確認用）
console.log("最初の値は" + num + "です");

変数numの値が0以外である間、変数numの値を出力し続ける
while (num !== 0) {
    変数numの値が0以外である間、変数numの値を出力し続ける
    num = Math.floor(Math.random() * 5);

    次の条件式で比較される、変数numの現在の値を出力する
    console.log("現在の値は" + num + "です");
}


繰り返し処理をする際に気を付けるべきポイントは
無限ループ

無限ループは、条件式がtrueを返し続けるとき
（falseを返す可能性がないとき）に発生する

無限ループ例

定数numに5を代入する
const num = 5;

条件式が常にtrueを返すので、無限ループになる
while (num === 5) {
    console.log(num);
}

これは最初に定数numに５を代入したきりそのままなので
定数numの値が常に5になる
条件式num　=== 5 は常にtrueを返し、無限ループが発生する

繰り返し処理を行うときは「条件式がfalseを返す可能性はあるか」を必ず確認するようにする
上記の例であれば、条件式num === 5がfalseを返す、
つまり定数numの値が5以外になる可能性があるかどうかを確認する

、無限ループが発生する繰り返し処理をブラウザで実行してしまった場合は、すぐにタブを閉じる
ブラウザがフリーズした場合は強制終了する
Windows
「Ctrl + Shift + Esc」でタスクマネージャーを開く
フリーズしたブラウザ（Google Chrome）を選択し、「タスクの終了」ボタンをクリックする

Mac
「option + command + esc」で強制終了ウィンドウを開く
フリーズしたブラウザ（Google Chrome）を選択し、「強制終了」ボタンをクリックする



for(カウンタ変数の初期値; 条件式; カウンタ変数の増減値) {
    カウンタ変数が決まった値になるまで繰り返す処理
}

カウンタ変数とは、「繰り返し処理の回数を数えるために使われる変数」のこと
一般的な変数と機能は全く同じですが
「繰り返し処理の回数を数える」という用途を強調するためにカウンタ変数という言葉が使われます。

カウンタ変数には、慣習的にiという変数名がつけられることが多いです。なお、iは「索引」を意味するindexの頭文字です。

for文の使用例

1~10までの数値を順番に出力する

for (let i = 1; i <= 10; i += 1) {
    console.log(i);
}

let i = 1：カウンタ変数の初期値（カウンタ変数iの宣言と値の代入を行う）
i <= 10：条件式（カウンタ変数iの値が10以下のときにtrueを返す）
i += 1：カウンタ変数の増減値（処理を繰り返すごとに、カウンタ変数iに1を加算する
つまり、上記のコードはカウンタ変数iが1からスタートし
、処理を繰り返すごとに1ずつ加算されていきます。
そして、カウンタ変数iが10より大きくなる（条件式i <= 10がfalseになる）と、繰り返し処理が終了します。

代入演算子
カウンタ変数iに1を加算するときに記述した+=は、代入演算子といいます。
代入演算子とは、変数に値を代入するときに使う演算子のことです。代入演算子	処理の内容
=	変数に右項の値を代入する（代入）。
+=	変数の値に右項の値を足して代入する（加算代入）。
-=	変数の値から右項の値を引いて代入する（減算代入）。
*=	変数の値に右項の値を掛けて代入する（乗算代入）。
/=	変数の値を右項の値で割って代入する（除算代入）。
%=	変数の値を右項の値で割った余りを代入する（剰余代入）。

インクリメント演算子とデクリメント演算子
i += 1やi -= 1のように単純に1増やしたり1減らしたりしたい場合、以下のように書き換えることもできます。

i += 1→ i++
i -= 1→ i--

この++のことをインクリメント演算子、--のことをデクリメント演算子といいます。

インクリメント＝増加
デクリメント＝減少
より簡潔に記述できるので、繰り返し処理ではよく使われます。覚えておきましょう

for文もwhile文と同様、無限ループが発生しないように十分注意する

